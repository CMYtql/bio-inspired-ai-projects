using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Genetic_Algorithm_Commons;
using Genetic_Algorithm_Commons.Util;

namespace Multi_Objective_Genetic_Algorithm {
    public class NSGA2 : MultiObjectiveGeneticAlgorithm {
        protected Population_MultiObjective_AG offspring;
        protected int offspringPopSize;

        public NSGA2(ProblemBase problem,
            //SelectionMethodBase selectionMethod, 
            //CrossoverMethodBase crossoverMethod, 
            //ReinsertionMethodBase reinsertionMethod, 
            int populationSize, int offspringPopSize, int numberOfGenerations, int mutationPct)
            : base(problem, populationSize, numberOfGenerations, mutationPct) {
                this.offspringPopSize = offspringPopSize;
        }

        public override IEnumerable<IndividualBase> Execute() {
            //Initialize Population + Evaluate Objective Values
            Population = new Population_MultiObjective_AG(Problem, InitialPopulationSize);
            Population.RandomInitialize();
            
            // Assign Rank Based on Pareto Dominance
            List<List<IndividualBase>> fronts = FastNonDominatedSort(Population);

            // Assign Crowding Distance for the Population
            Population.CrowdingDistanceAssignment();

            // Creates Offspring through Selection, Recombination, and Mutation
            Population_MultiObjective_AG childPopulation = Procreate(Population);

            throw new NotImplementedException();
        }

        private Population_MultiObjective_AG Procreate(Population_MultiObjective_AG population) {
            int expectedChildCount = InitialPopulationSize;
            Population_MultiObjective_AG newGeneration = new Population_MultiObjective_AG(Problem, expectedChildCount);

            while (newGeneration.IndividualCount < expectedChildCount)
            {
                // Selection Method
                IndividualBase child1 = null, child2 = null;
                IndividualBase parent1 = BinaryTournment(population);
                IndividualBase parent2 = BinaryTournment(population);
                
                // Crossover Method
                Problem.PMXCrossover(parent1, parent2, out child1, out child2);

                //

                //selectionMethod.Execute(population, out parent1, out parent2);
                //crossoverMethod.Execute(parent1, parent2, out child1, out child2);
                newGeneration.AddIndividual(child1);
                newGeneration.AddIndividual(child2);
            }

            int mutatedChildCount = ((newGeneration.IndividualCount * mutationPct) / 100);
            for (int idx = 0; idx < mutatedChildCount; ++idx)
            {
                IndividualBase randomIndividual = newGeneration.GetRandomIndividual();
                Problem.MutateIndividual(randomIndividual);
            }
            return newGeneration;
        }

        public override Population_MultiObjective_AG RunGeneration() {
            throw new NotImplementedException();
        }

        private IndividualBase BinaryTournment(Population_MultiObjective_AG population) {
            IndividualBase[] contestants = new IndividualBase[2];

            contestants[0] = population.GetRandomIndividual();
            do {
                contestants[1] = population.GetRandomIndividual();
            } while (contestants[0] == contestants[1]);

            return BestByCrowdedComparison(contestants[0], contestants[1]);
        }

        private IndividualBase BestByCrowdedComparison(IndividualBase individual1, IndividualBase individual2) {
            if (individual1.NonDominationRank < individual2.NonDominationRank)
                return individual1;
            if (individual2.NonDominationRank < individual1.NonDominationRank)
                return individual2;
            // Se Estão no Mesmo Ranking de Não-Dominância
            if (individual1.CrowdingDistance > individual2.CrowdingDistance)
                return individual1;
            if (individual2.CrowdingDistance > individual1.CrowdingDistance)
                return individual2;
            // Se têm a Mesma CrowdingDistance
            if (Aleatoriety.GetRandomInt(2) == 0)
                return individual1;
            else
                return individual2;
        }

        //mudei o nome dos metodos pra começar a implementar o spea2

        public IEnumerable<IndividualBase> ExecuteNSGA2() {
            // Clears the Individual Population
            Population = new Population_MultiObjective_AG(Problem, InitialPopulationSize);
            offspring = new Population_MultiObjective_AG(Problem, offspringPopSize);

            // Generate Initial Population
            for (int idx = 0; idx < InitialPopulationSize; ++idx) {
                Population.AddIndividual(Problem.CreateRandomSolution());
            }

            // Make the Population become the Current Generation
            Population_MultiObjective_AG currentGeneration = Population;
            Population_MultiObjective_AG newGeneration = null;

            for (int idxGeracao = 0; idxGeracao < NumberOfGenerations; ++idxGeracao) {
                //newGeneration = RunGeneration(currentGeneration, selectionMethod, crossoverMethod, reinsertionMethod);
                //newGeneration.BestFirstSort();
                currentGeneration = newGeneration;
            }

            return null;//currentGeneration.GetBestIndividual();
        }

        private Population_MultiObjective_AG RunNSGA2(Population_MultiObjective_AG currentGeneration/*, SelectionMethodBase selectionMethod, CrossoverMethodBase crossoverMethod, ReinsertionMethodBase reinsertionMethod*/) {
            Population_MultiObjective_AG rt = new Population_MultiObjective_AG(Problem, InitialPopulationSize + offspringPopSize);
            rt.AddPopulation(Population);
            rt.AddPopulation(offspring);
            List<List<IndividualBase>> fronts = FastNonDominatedSort(rt);
            Population_MultiObjective_AG front = new Population_MultiObjective_AG(Problem, 0);

            Population = new Population_MultiObjective_AG(Problem, InitialPopulationSize);
            for (int i = 0; Population.Content.Count + front.Content.Count < InitialPopulationSize; ++i) {
                //é pra condição olhar o tanto de elementos que ja foram inseridos na população + o front atual, acho que ta certo essa condição..
                //seleciona o proximo front
                front.Content = fronts.ElementAt(i);
                //atribui a crowding distance para os elementos do front
                front.CrowdingDistanceAssignment();
                //e adiciona à populacao
                Population.AddPopulation(front);
            }

            //TODO
            //alguem confere a comparação pf?
            //ordena a população de acordo com o Crowded-Comparison Operator
            Population.sort();

            //pega soh o numero de individuos que deve caber na população
            front.TrimTo(InitialPopulationSize - Population.Content.Count);
            //e adiciona à população
            Population.AddPopulation(front);

            //o fluxo acima foi implementado de acordo com o artigo, mas da pra otimizar algumas coisas usando as estruturas que estão sendo usadas..
            //"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil" - Pato Donald Knuth
            
            //cria nova população offspring
            offspring = Procreate(Population);

            //não precisa desse return, as operações são feitas direto na população
            //pai da coisa, arruma esse fluxo pf?
            return null;
        }

        private List<List<IndividualBase>> FastNonDominatedSort(Population_MultiObjective_AG population) {
            List<List<IndividualBase>> Fronts = new List<List<IndividualBase>>();

            List<IndividualBase> NonDominatedFront = new List<IndividualBase>();
            foreach (IndividualBase individual in population.Content) {
                individual.DominatesList = new List<IndividualBase>();
                individual.DominatedByCount = 0;

                foreach (IndividualBase another in population.Content.Where(I => !I.Equals(individual))) {
                    if (individual.Dominates(another)) {
                        individual.DominatesList.Add(another);  // Lista dos elementos que sao dominados
                    }
                    else if (another.Dominates(individual)) {
                        individual.DominatedByCount++; // O atributo np nao foi implementado ainda, se refere a qnt de elementos q o dominam 
                    }
                }
                if (individual.DominatedByCount == 0) {
                    individual.NonDominationRank = 1;
                    NonDominatedFront.Add(individual);
                }
            }
            int NonDominationRank = 2;
            List<IndividualBase> CurrentFront = NonDominatedFront;
            List<IndividualBase> FrontQ = NonDominatedFront;
            do {
                Fronts.Add(FrontQ);
                FrontQ = new List<IndividualBase>();
                foreach (IndividualBase individual in CurrentFront) {
                    foreach (IndividualBase dominatedIndividual in individual.DominatesList) {
                        dominatedIndividual.DominatedByCount--;
                        if (dominatedIndividual.DominatedByCount == 0) {
                            dominatedIndividual.NonDominationRank = NonDominationRank;
                            FrontQ.Add(dominatedIndividual);
                        }
                    }
                }
                CurrentFront = FrontQ;
                NonDominationRank++;
            } while (FrontQ.Count != 0);
            return Fronts;
        }
    }
}
